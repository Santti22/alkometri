[{"C:\\Users\\korpi\\Documents\\koulujuttuja\\React sovellukset\\alcometer\\src\\index.js":"1","C:\\Users\\korpi\\Documents\\koulujuttuja\\React sovellukset\\alcometer\\src\\App.js":"2","C:\\Users\\korpi\\Documents\\koulujuttuja\\React sovellukset\\alcometer\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":1789,"mtime":1611761934412,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"qf2167",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\korpi\\Documents\\koulujuttuja\\React sovellukset\\alcometer\\src\\index.js",[],["16","17"],"C:\\Users\\korpi\\Documents\\koulujuttuja\\React sovellukset\\alcometer\\src\\App.js",["18"],"import React, {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [weight, setWeight] = useState(89)\n  const [bottles, setBottles] = useState(3)\n  const [time, setTime] = useState(1)\n  const [gender, setGender] = useState(\"male\")\n  const [result, setResult] = useState(0)\n\n  function getResult(e) {\n    let savior = 0;\n    const litres = bottles * 0.33\n    const grams = litres * 8 * 4.5\n    const burner = weight / 10\n    const gramsleft = grams - (burner * time)\n    e.preventDefault();\n\n    if (gender === \"male\") {\n      setResult(gramsleft / (weight * 0.7))\n    } else {\n      setResult(gramsleft / (weight * 0.6))\n    }\n  }\n\n  return (\n      <div className=\"main\">\n        <h2>Alcometer</h2>\n        <form onSubmit={getResult}>\n          <div>\n            <label>Weight</label>\n            <input value={weight} onChange={e => setWeight(e.target.value)}></input>\n          </div>\n          <div>\n            <label>Bottles</label>\n            <input type={Number} value={bottles} onChange={e => setBottles(e.target.value)}></input>\n          </div>\n          <div>\n            <label>Time</label>\n            <input type={Number} value={time} onChange={e => setTime(e.target.value)}></input>\n          </div>\n          <div>\n            <label>Gender</label>\n            <label><input type=\"radio\" name=\"gender\" value=\"male\" defaultChecked onChange={e => setGender(e.target.value)}></input>Male</label>\n            <label><input type=\"radio\" name=\"gender\" value=\"female\" onChange={e => setGender(e.target.value)}></input>Female</label>\n          </div>\n          <div>\n            <output>{result.toFixed(2)}</output>\n          </div>\n          <div>\n            <button>Calculate</button>\n          </div>\n        </form>\n      </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\korpi\\Documents\\koulujuttuja\\React sovellukset\\alcometer\\src\\reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":12,"column":9,"nodeType":"25","messageId":"26","endLine":12,"endColumn":15},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'savior' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]